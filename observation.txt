inputs
[[0.7470, 0.0855, 0.0481, 0.0481, 0.0932, 0.0787, 0.0884, 0.0418,
          0.0923, 0.0787, 0.0923],
         [0.8849, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835,
          0.0923, 0.0787, 0.0923],
         [0.7440, 0.0855, 0.0962, 0.0481, 0.0466, 0.0787, 0.0884, 0.0835,
          0.0923, 0.0787, 0.0461],
         [0.8388, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835,
          0.0461, 0.0787, 0.0923],
         [0.7926, 0.0855, 0.0481, 0.0962, 0.0932, 0.0787, 0.0442, 0.0835,
          0.0923, 0.0787, 0.0923]]]

torch.squeeze(labels)
tensor([[0.7902, 0.0855, 0.0481, 0.0962, 0.0466, 0.0787, 0.0884, 0.0835, 0.0923,
         0.0787, 0.0923],
        [0.7052, 0.0855, 0.0962, 0.0481, 0.0932, 0.0787, 0.0884, 0.0835, 0.0461,
         0.0393, 0.0461],
        [0.8849, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835, 0.0923,
         0.0787, 0.0923],
        [0.7513, 0.0427, 0.0962, 0.0962, 0.0466, 0.0787, 0.0442, 0.0835, 0.0923,
         0.0787, 0.0923],
        [0.7470, 0.0855, 0.0481, 0.0481, 0.0932, 0.0787, 0.0884, 0.0418, 0.0923,
         0.0787, 0.0923],
        [0.8849, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835, 0.0923,
         0.0787, 0.0923],
        [0.7440, 0.0855, 0.0962, 0.0481, 0.0466, 0.0787, 0.0884, 0.0835, 0.0923,
         0.0787, 0.0461],
        [0.8388, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835, 0.0461,
         0.0787, 0.0923],
        [0.7926, 0.0855, 0.0481, 0.0962, 0.0932, 0.0787, 0.0442, 0.0835, 0.0923,
         0.0787, 0.0923],
        [0.8849, 0.0855, 0.0962, 0.0962, 0.0932, 0.0787, 0.0884, 0.0835, 0.0923,
         0.0787, 0.0923]], device='cuda:0')

outputs
tensor([[ 0.0329, -0.0841, -0.0579, -0.0665, -0.0383, -0.0508,  0.0459, -0.0830,
          0.0374,  0.0318,  0.0107],
        [ 0.0377, -0.0843, -0.0567, -0.0676, -0.0389, -0.0471,  0.0433, -0.0778,
          0.0369,  0.0322,  0.0105],
        [ 0.0387, -0.0793, -0.0542, -0.0687, -0.0420, -0.0502,  0.0399, -0.0789,
          0.0384,  0.0350,  0.0162],
        [ 0.0339, -0.0836, -0.0572, -0.0681, -0.0384, -0.0505,  0.0449, -0.0842,
          0.0383,  0.0324,  0.0116],
        [ 0.0376, -0.0838, -0.0537, -0.0678, -0.0429, -0.0475,  0.0425, -0.0743,
          0.0377,  0.0327,  0.0124],
        [ 0.0367, -0.0815, -0.0580, -0.0671, -0.0372, -0.0508,  0.0413, -0.0744,
          0.0404,  0.0351,  0.0135],
        [ 0.0326, -0.0840, -0.0598, -0.0672, -0.0355, -0.0508,  0.0457, -0.0824,
          0.0392,  0.0323,  0.0101],
        [ 0.0367, -0.0836, -0.0550, -0.0664, -0.0375, -0.0497,  0.0422, -0.0808,
          0.0363,  0.0346,  0.0111],
        [ 0.0344, -0.0823, -0.0579, -0.0669, -0.0396, -0.0510,  0.0423, -0.0834,
          0.0403,  0.0336,  0.0122],
        [ 0.0348, -0.0832, -0.0595, -0.0677, -0.0392, -0.0494,  0.0427, -0.0756,
          0.0391,  0.0321,  0.0145]], device='cuda:0', grad_fn=<MulBackward0>)

loss MSE
tensor(0.0637, device='cuda:0', grad_fn=<MseLossBackward>)


np.around([loss_l1.data[0]], decimals=8), \
IndexError: invalid index of a 0-dim tensor. Use `tensor.item()` in Python or `tensor.item<T>()` in C++ to convert a 0-dim tensor to a number
